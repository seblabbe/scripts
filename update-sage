#!/usr/bin/env bash
# This script updates Sage and run make ptestlong only if a new develop version
# is available on github
# WARNING: Use it at your own risk because I know it does not always work well...
# Author: Sebastien Labbe, 16 dec 2015

# Debug mode
# set -xv

# On Darwin, remove Macports from PATH
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
   echo "update-sage: on Linux machine, we do not change variable PATH"
elif [[ "$unamestr" == 'Darwin' ]]; then
   echo "update-sage: on Darwin machine, we remove Macports from PATH..."
   PATH=`echo $PATH | sed -e 's/\/opt\/local\/sbin://'`
   PATH=`echo $PATH | sed -e 's/\/opt\/local\/bin://'`
   #echo $PATH
fi

# Set SAGE_ROOT
if [ -d $HOME/GitBox/sage ]; then
    SAGE_ROOT=$HOME/GitBox/sage
elif [ -d $HOME/Applications/sage-git ]; then
    SAGE_ROOT=$HOME/Applications/sage-git
else
    echo >&2 "update-sage: unable to set SAGE_ROOT variable"
    exit 1
fi
cd $SAGE_ROOT

# Check if there are uncommitted changes
# http://stackoverflow.com/questions/2657935
# http://stackoverflow.com/questions/3878624
if [[ -z $(git status --porcelain) ]]
then
    echo "update-sage: tree is clean"
else
    echo >&2 "update-sage: Error: tree is dirty, please commit changes or stash them before running this"
    exit 1
fi

echo "update-sage: checking out develop branch..."
git checkout develop
echo "update-sage: fetching github develop branch..."
git fetch github develop

# Check if a pull is needed in git
# http://stackoverflow.com/questions/3258243/check-if-pull-needed-in-git
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse @{u})
BASE=$(git merge-base @ @{u})
echo "update-sage: Local develop branch: " $LOCAL
echo "update-sage: Remote develop branch:" $REMOTE
echo "update-sage: Base branch of both:  " $BASE
if [ "$LOCAL" = "$REMOTE" ]; then
    echo "update-sage: Local develop branch is up-to-date with github"
    echo "update-sage: Since you asked, we will re-build sage anyway"
elif [ "$LOCAL" = "$BASE" ]; then
    echo "update-sage: Local develop branch is behind github/develop, we need to pull"
    echo "update-sage: pulling github develop branch..."
    git pull github develop
    # git merge FETCH_HEAD # or equivalently ?
elif [ "$REMOTE" = "$BASE" ]; then
    echo >&2 "update-sage: Error: Local develop branch has commits not in github/develop."
    exit 1
else
    echo >&2 "update-sage: Error: Local develop branch has diverged from github/develop."
    exit 1
fi

# Get the number of cpus
# See also `sage -python src/bin/sage-num-threads.py` which outputs 1 2 2
# NCPUS=`sage -c "print(sage.parallel.ncpus.ncpus())"`
if [[ "$unamestr" == 'Linux' ]]; then
    NCPUS=`nproc --all`
elif [[ "$unamestr" == 'Darwin' ]]; then
    NCPUS=`sysctl -n hw.ncpu`
fi
echo "update-sage: found $NCPUS cpus on this machine"

# Make sure to use CCACHE
# http://doc.sagemath.org/html/en/installation/source.html#environment-variables
export SAGE_INSTALL_CCACHE=yes
export V=0
#https://groups.google.com/d/msg/sage-devel/zQsZsivts0I/Fgiev7hSAwAJ
export OPENBLAS_CONFIGURE="TARGET=ATOM"

# Clean logs
echo "update-sage: deleting logs repository..."
rm -rf logs

# Build Sage
echo "update-sage: running make -j$NCPUS ..."
export MAKE="make -j$NCPUS"
make

# In case of error, make doc-clean and try make again
if [ $? -ne 0 ]; then
    echo >&2 "update-sage: Error when runing make (probably because of doc)"
    echo "update-sage: running make doc-clean..."
    make doc-clean
    echo "update-sage: running make -j$NCPUS again ..."
    make
    if [ $? -ne 0 ]; then
        echo >&2 "update-sage: Error when runing make (2nd time)"
        exit 1
    else
        echo "update-sage: done running make -j$NCPUS (2nd time), it was succesfull"
    fi
else
    echo "update-sage: done running make -j$NCPUS (1st time), it was succesfull"
fi
echo "update-sage: done running make -j$NCPUS"

# Install Optional packages
echo "update-sage: making sure few optional packages are installed"
# latex
make dot2tex
# notebook stuff
make rst2ipynb          # dependencies include notedown, pandoc_attributes
make beautifulsoup 
# internet stuff
make openssl 
# SAT and LP SOLVERS
make cbc 
make cryptominisat      # dependencies include cmake
make pycosat 
make glucose 
# Polytopes
make pynormaliz         # dependencies include normaliz, e_antic
echo "update-sage: done installing few optional packages"

# Run tests
echo "update-sage: running tests..."
#./sage -t -p --all --long --logfile=logs/ptestlongshowskipped.log --show-skipped
./sage -t -p --all --long --optional=sage,optional,external --show-skipped --logfile=logs/ptestallshowskipped.log
./sage -t -p --all --failed --long --optional=sage,optional,external --show-skipped --logfile=logs/refailed.log

# Build Sage with 1 proc for doc
#export MAKE="make -j$NCPUS"
#make start
#export MAKE="make -j1"
#make doc
#export MAKE="make -j$NCPUS"
#./sage -t -p --all --long --logfile=logs/ptestlong.log

# Clean branches merged into sage
# http://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-have-been-merged 
MERGED=$(git branch --merged develop | egrep -v "(^\*|master|develop)")
if [ ! -z "$MERGED" ]; then
    echo update-sage: The following branches have been merged into sage:
    echo update-sage: $MERGED
    for BRANCH in $MERGED
    do
        echo update-sage: Branch $BRANCH is:
        git show $BRANCH -q
    done
    echo update-sage: Deleting merged branches ...
    echo $MERGED | xargs git branch -d
else
    echo update-sage: No merged branch found.
fi


IPYTHON_CONFIG=`sage -ipython locate`/profile_default/ipython_config.py
if [ -f $IPYTHON_CONFIG ]; then
    echo "update-sage: ipython_config.py file found, we do nothing."
else
    echo "update-sage: ipython_config.py does not exist, we create it ..."
    ./sage -ipython profile create
    echo "update-sage: setting Linux color in ipython_config.py ..."
    sed -i "s/#c.InteractiveShell.colors = 'Neutral'/c.InteractiveShell.colors = 'Linux'/" $IPYTHON_CONFIG
fi

